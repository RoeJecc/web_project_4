!function(){"use strict";var e={346:function(e,t,n){e.exports=n.p+"4e8e0a1d604782a0dff8.svg"}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={exports:{}};return e[r](i,i.exports,n),i.exports}n.p="",function(){var e={formSelector:".modal__profile",inputSelector:".modal__text-input",submitButtonSelector:".modal__form-submit",inactiveButtonClass:"modal__form-submit_disabled",inputErrorClass:".modal__text-input_type_error",errorClass:"modal__input-error_active"},t=document.querySelector(".profile__edit-button"),r=document.querySelector(".profile__add-button"),o=document.querySelector(".profile__avatar-button"),i=document.querySelector(".modal_type_profile"),a=document.querySelector(".modal_type_add-card"),u=document.querySelector(".profile__name"),s=document.querySelector(".profile__occupation"),l=(document.querySelector(".modal_type_delete-card"),document.forms.profile),c=l.elements.name,f=l.elements.occupation,h=(document.querySelector(".modal_type_preview"),document.querySelector(".modal__image"),document.querySelector(".profile__avatar"));function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var d=function(){function e(t,n,r){var o=t.data,i=t.handleCardClick,a=t.handleDeleteClick,u=t.likeHandler;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=o.name,this._link=o.link,this._owner=o.owner,this._userId=n,this._likes=o.likes,this._template=r,this._id=o._id,this._handleDeleteClick=a,this._handleCardClick=i,this._likeHandler=u}var t,n;return t=e,(n=[{key:"id",value:function(){return this._id}},{key:"_getTemplate",value:function(){return document.querySelector(this._template).content.querySelector(".element").cloneNode(!0)}},{key:"isLiked",value:function(){var e=this;return this._likes.some((function(t){return t._id===e._userId}))}},{key:"showLikes",value:function(){this._cardLikes.textContent=this._likes.length,this.isLiked()?this._likeButton.classList.add("element__button_active"):this._likeButton.classList.remove("element__button_active")}},{key:"updateLikes",value:function(e){this._likes=e,this.showLikes()}},{key:"_showDeleteIcon",value:function(){this._owner._id===this._userId&&this._cardTrash.classList.add("element__delete-button_active")}},{key:"_setEventListeners",value:function(){var e=this;this._element.querySelector(".element__button").addEventListener("click",(function(){return e._likeHandler(e,e._id)})),this._element.querySelector(".element__delete-button").addEventListener("click",(function(){return e._handleDeleteClick([e._id,e._element])})),this._element.querySelector(".element__image").addEventListener("click",(function(){return e._handleCardClick({name:e._name,link:e._link})}))}},{key:"generateCard",value:function(){return this._element=this._getTemplate(),this._setEventListeners(),this._cardTrash=this._element.querySelector(".element__delete-button"),this._element.querySelector(".element__text").textContent=this._name,this._element.querySelector(".element__image").src=this._link,this._element.querySelector(".element__image").alt=this._name,this._element.id=this._id,this._cardLikes=this._element.querySelector(".element__likes"),this._likeButton=this._element.querySelector(".element__button"),this._showDeleteIcon(),this.showLikes(),this._element}}])&&p(t.prototype,n),e}();function _(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var m=function(){function e(t,n){var r=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._renderer=r,this._container=document.querySelector(n)}var t,n;return t=e,(n=[{key:"renderer",value:function(e){var t=this;e.forEach((function(e){return t._container.append(t._renderer(e))}))}},{key:"addItem",value:function(e){this._container.prepend(e)}}])&&_(t.prototype,n),e}();function y(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var v=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popupElement=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this)}var t,n;return t=e,(n=[{key:"open",value:function(){this._popupElement.classList.add("modal_open"),document.addEventListener("keydown",this._handleEscClose)}},{key:"close",value:function(){this._popupElement.classList.remove("modal_open"),document.removeEventListener("keydown",this._handleEscClose)}},{key:"_handleEscClose",value:function(e){27==e.which&&this.close()}},{key:"setEventListeners",value:function(){var e=this;this._popupElement.addEventListener("click",(function(t){(t.target.classList.contains("modal__close-button")||t.target.classList.contains("modal_open"))&&e.close()}))}}])&&y(t.prototype,n),e}();function b(e){return(b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function k(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function g(e,t,n){return(g="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=w(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function S(e,t){return(S=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function E(e,t){return!t||"object"!==b(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function w(e){return(w=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var C=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&S(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=w(r);if(o){var n=w(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return E(this,e)});function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,e))._image=t._popupElement.querySelector(".modal__image"),t._name=t._popupElement.querySelector(".modal__image-caption"),t}return t=a,(n=[{key:"open",value:function(e){var t=e.name,n=e.link;this._image.src=n,this._image.alt=t,this._name.textContent=t,g(w(a.prototype),"open",this).call(this)}}])&&k(t.prototype,n),a}(v);function L(e){return(L="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function j(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function O(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function q(e,t,n){return(q="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=T(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function P(e,t){return(P=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function x(e,t){return!t||"object"!==L(t)&&"function"!=typeof t?I(e):t}function I(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function T(e){return(T=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var R=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&P(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=T(r);if(o){var n=T(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return x(this,e)});function a(e){var t,n=e.popupSelector,r=e.popupSubmit;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,n))._popupSubmit=r,t._formElement=t._popupElement.querySelector(".modal__profile"),t._submitEventHandler=t._submitEventHandler.bind(I(t)),t}return t=a,(n=[{key:"_getInputValues",value:function(){if(this._popupElement.querySelector(".modal__text-input")){var e=(t=this._popupElement.querySelectorAll(".modal__text-input"),function(e){if(Array.isArray(e))return j(e)}(t)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(t)||function(e,t){if(e){if("string"==typeof e)return j(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?j(e,t):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).map((function(e){return e.value}));return{name:e[0],link:e[1]}}var t}},{key:"_submitEventHandler",value:function(){var e=this._getInputValues()||this._info;this._popupSubmit(e),this.close()}},{key:"setEventListeners",value:function(){this._popupElement.addEventListener("submit",this._submitEventHandler),q(T(a.prototype),"setEventListeners",this).call(this)}},{key:"close",value:function(){this._formElement.reset(),q(T(a.prototype),"close",this).call(this)}},{key:"open",value:function(e){q(T(a.prototype),"open",this).call(this),this._info=e}}])&&O(t.prototype,n),a}(v);function U(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var A=function(){function e(t){var n=t.name,r=t.link,o=t.avatar;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=document.querySelector(n),this._occupation=document.querySelector(r),this._avatar=document.querySelector(o)}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return this.userInfo=[this._name.textContent,this._occupation.textContent,this._avatar.src]}},{key:"setUserInfo",value:function(e,t,n){this._name.textContent=e,this._occupation.textContent=t,this._avatar.src=n}}])&&U(t.prototype,n),e}();function B(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function D(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var H=function(){function e(t,n){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),D(this,"_hasInvalidInput",(function(e){return e.some((function(e){return!e.validity.valid}))})),D(this,"_setEventListeners",(function(){r._inputs.forEach((function(e){e.addEventListener("input",(function(){r._checkInputValidity(e,r._inputErrorClass),r._toggleButtonState(r._element,r._inputSelector)}))}))})),this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass,this._element=n,this._inputs=Array.from(this._element.querySelectorAll(this._inputSelector)),this._button=this._element.querySelector(this._submitButtonSelector)}var t,n;return t=e,(n=[{key:"_showErrorMessage",value:function(e){var t=this._element.querySelector("#"+e.id+"-error");t.textContent=e.validationMessage,t.classList.add(this._errorClass),e.classList.add(this._inputErrorClass)}},{key:"_hideErrorMessage",value:function(e){var t=this._element.querySelector("#"+e.id+"-error");t.textContent="",t.classList.remove(this._errorClass),e.classList.remove(this._inputErrorClass)}},{key:"_checkInputValidity",value:function(e){e.validity.valid?this._hideErrorMessage(e):this._showErrorMessage(e,e.validationMessage)}},{key:"_toggleButtonState",value:function(){this._inputs.every((function(e){return!e.validity.valid}))?(this._button.classList.add(this._inactiveButtonClass),this._button.disabled=!0):(this._button.classList.remove(this._inactiveButtonClass),this._button.disabled=!1)}},{key:"disableButton",value:function(){this._button.classList.add(this._inactiveButtonClass),this._button.disabled=!0}},{key:"enableValidation",value:function(){this._element.addEventListener("submit",(function(e){e.preventDefault()})),this._setEventListeners()}}])&&B(t.prototype,n),e}();function M(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var V=function(){function e(t){var n=t.baseURL,r=t.headers;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._baseURL=n,this._headers=r}var t,n;return t=e,(n=[{key:"getInitialCards",value:function(){return fetch(this._baseURL+"/cards",{headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject("Error"+e.statusText)})).catch((function(e){return console.log(e)}))}},{key:"getUserInfo",value:function(){return fetch(this._baseURL+"/users/me",{headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject("Error"+e.statusText)})).catch((function(e){return console.log(e)}))}},{key:"getAppInfo",value:function(){return Promise.all([this.getUserInfo(),this.getInitialCards()])}},{key:"addCard",value:function(e){var t=e.name,n=e.link;return fetch(this._baseURL+"/cards",{headers:this._headers,method:"POST",body:JSON.stringify({name:t,link:n})}).then((function(e){return e.ok?e.json():Promise.reject("Error"+e.statusText)})).catch((function(e){return console.log(e)}))}},{key:"removeCard",value:function(e){return fetch(this._baseURL+"/cards/"+e,{headers:this._headers,method:"DELETE"}).then((function(e){return e.ok?e.json():Promise.reject("Error"+e.statusText)})).catch((function(e){return console.log(e)}))}},{key:"addLike",value:function(e){return fetch(this._baseURL+"/cards/likes/"+e,{headers:this._headers,method:"PUT"}).then((function(e){return e.ok?e.json():Promise.reject("Error"+e.statusText)})).catch((function(e){return console.log(e)}))}},{key:"removeLike",value:function(e){return fetch(this._baseURL+"/cards/likes/"+e,{headers:this._headers,method:"DELETE"}).then((function(e){return e.ok?e.json():Promise.reject("Error"+e.statusText)})).catch((function(e){return console.log(e)}))}},{key:"setUserInfo",value:function(e){var t=e.name,n=e.about;return fetch(this._baseURL+"/users/me/",{method:"PATCH",headers:{authorization:"f3cf689f-e903-4b5b-9d77-2b0b4048d455","Content-Type":"application/json"},body:JSON.stringify({name:t,about:n})}).then((function(e){return e.ok?e.json():Promise.reject("Error"+e.statusText)})).catch((function(e){return console.log(e)}))}},{key:"setUserAvatar",value:function(e){return fetch(this._baseURL+"/users/me/avatar/",{headers:this._headers,method:"PATCH",body:JSON.stringify({avatar:e})}).then((function(e){return e.ok?e.json():Promise.reject("Error"+e.statusText)})).catch((function(e){return console.log(e)}))}}])&&M(t.prototype,n),e}(),N=n(346);function J(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,u=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){u=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(u)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return z(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?z(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function z(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}document.getElementById("vector-image").src=N;var $=new V({baseURL:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"f3cf689f-e903-4b5b-9d77-2b0b4048d455","Content-Type":"application/json"}}),F=new m({renderer:ee},".elements"),G=new H(e,i),K=new H(e,a),Q=new H(e,o);G.enableValidation(),K.enableValidation(),Q.enableValidation();var W=new A({name:".profile__name",link:".profile__occupation",avatar:".profile__avatar"}),X=new R({popupSelector:".modal_type_profile",popupSubmit:function(e){var t,n,r;t={name:e.name,link:e.link},n=t.name,r=t.link,re(!0),$.setUserInfo({name:n,about:r}).then((function(e){u.textContent=e.name,s.textContent=e.about,re(!1),X.close()})).catch((function(e){return console.log(e)}))}});X.setEventListeners(),t.addEventListener("click",(function(){var e=W.getUserInfo();c.value=e[0],f.value=e[1],X.open()}));var Y,Z=new C(".modal_type_preview");function ee(e){return new d({data:e,handleCardClick:function(e){var t=e.name,n=e.link;Z.open({name:t,link:n})},handleDeleteClick:function(e){ne.open(e)},likeHandler:function(e,t){!function(e,t){e.isLiked()?$.removeLike(t).then((function(t){e.updateLikes(t.likes)})).catch((function(e){return console.log(e)})):$.addLike(t).then((function(t){e.updateLikes(t.likes)})).catch((function(e){return console.log(e)}))}(e,t)}},Y,"#card-template").generateCard()}function te(e){re(!0),$.setUserAvatar(e).then((function(e){h.src=e.avatar,re(!1),avatarPopup.close()})).catch((function(e){return console.log(e)}))}Z.setEventListeners(),$.getAppInfo().then((function(e){var t=J(e,2),n=t[0],i=t[1];Y=n._id,W.setUserInfo(n.name,n.about,n.avatar),F.renderer(i);var a=new R({popupSelector:".modal_type_add-card",popupSubmit:function(e){$.addCard(e).then((function(e){var t=ee(e);F.addItem(t)}))}});a.setEventListeners(),r.addEventListener("click",(function(){a.open()}));var u=new R({popupSelector:".modal_type_avatar",popupSubmit:function(e){te(e.name)}});u.setEventListeners(),o.addEventListener("click",(function(){K.disableButton(),u.open()}))}));var ne=new R({popupSelector:".modal_type_delete-card",popupSubmit:function(e){var t=J(e,2),n=t[0],r=t[1];re(!0),r.remove(),$.removeCard(n).then((function(){re(!1),ne.close()})).catch((function(e){return console.log(e)}))}});function re(e,t){document.querySelector(".modal__form-submit").textContent=e?"Saving...":"Save"}ne.setEventListeners()}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,